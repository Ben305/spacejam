// Generated by CoffeeScript 1.6.3
(function() {
  var ChildProcess, EventEmitter, Meteor, expect,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  expect = require('chai').expect;

  ChildProcess = require('./ChildProcess');

  EventEmitter = require('events').EventEmitter;

  Meteor = (function(_super) {
    __extends(Meteor, _super);

    Meteor.prototype.childProcess = null;

    Meteor.prototype.buffer = {
      stdout: "",
      stderr: ""
    };

    function Meteor(rc) {
      this.rc = rc;
      this.run = __bind(this.run, this);
      expect(this.rc.port).to.be.a('number');
      if (!this.rc.packages) {
        log.error("no packages to test have been specified");
      }
    }

    Meteor.prototype.run = function() {
      var args, options,
        _this = this;
      log.info("spawning meteor");
      expect(this.childProcess).to.be["null"];
      args = ["-p", this.rc.port, "test-packages", this.rc.packages, "--driver-package", "test-in-console"];
      if (this.rc.settings_path != null) {
        args.push("--settings");
        args.push(this.rc.settings_path);
      }
      options = {
        cwd: this.rc.app_path,
        detached: false
      };
      this.childProcess = new ChildProcess();
      this.childProcess.spawn("meteor", args, options);
      this.childProcess.child.stdout.on("data", function(data) {
        _this.buffer.stdout += data;
        _this.hasErrorText(_this.buffer.stdout);
        return _this.hasReadyText(_this.buffer.stdout);
      });
      return this.childProcess.child.stderr.on("data", function(data) {
        _this.buffer.stderr += data;
        return _this.hasErrorText(_this.buffer.stderr);
      });
    };

    Meteor.prototype.hasErrorText = function(buffer) {
      if (buffer.lastIndexOf(this.rc.meteor_error_text) !== -1) {
        return this.emit("error");
      }
    };

    Meteor.prototype.hasReadyText = function(buffer) {
      if (buffer.lastIndexOf(this.rc.meteor_ready_text) !== -1) {
        return this.emit("ready");
      }
    };

    Meteor.prototype.kill = function() {
      var _ref, _ref1;
      return (_ref = this.childProcess) != null ? (_ref1 = _ref.child) != null ? _ref1.kill() : void 0 : void 0;
    };

    return Meteor;

  })(EventEmitter);

  module.exports = Meteor;

}).call(this);
