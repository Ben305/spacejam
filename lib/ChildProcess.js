// Generated by CoffeeScript 1.6.3
(function() {
  var ChildProcess, expect, _exec, _spawn;

  expect = require('chai').expect;

  _exec = require("child_process").exec;

  _spawn = require("child_process").spawn;

  ChildProcess = (function() {
    ChildProcess.prototype.child = null;

    function ChildProcess() {
      log.debug("ChildProcess.constructor", arguments);
    }

    ChildProcess.prototype.exec = function(command, taskName) {
      var _this = this;
      log.debug("ChildProcess.exec()", arguments);
      expect(this.child).to.be["null"];
      expect(command).to.be.a('string');
      expect(taskName).to.be.a('string');
      this.child = _exec(command, function(err, stdout, stderr) {
        if (((err != null ? err.code : void 0) != null) && err.code !== 0) {
          console.error(("" + taskName + " exit code: ") + err.code);
          process.exit(err.code);
        }
        if (((err != null ? err.signal : void 0) != null) && err.signal !== 0) {
          console.error(("" + taskName + " termination signal: ") + err.signal);
          return process.exit(1);
        }
      });
      this.child.stdout.on('data', function(data) {
        return console.info(data);
      });
      return this.child.stderr.on('data', function(data) {
        return console.error(data);
      });
    };

    ChildProcess.prototype.spawn = function(command, args, options) {
      var _this = this;
      log.debug("ChildProcess.spawn() ", command);
      expect(this.child).to.be["null"];
      expect(command).to.be.a('string');
      if (args != null) {
        expect(args).to.be.an('array');
      }
      if (options != null) {
        expect(options).to.be.an('object');
      }
      this.child = _spawn(command, args, options);
      this.child.stdout.setEncoding('utf8');
      this.child.stderr.setEncoding('utf8');
      this.child.stdout.on("data", function(data) {
        return log.info(data);
      });
      this.child.stderr.on("data", function(data) {
        return log.error(data);
      });
      return this.child.on("exit", function(code, signal) {
        if (code != null) {
          return log.info(("" + command + " exited with code: ") + code);
        } else if (signal != null) {
          return log.info(("" + command + " killed with signal: ") + signal);
        } else {
          return log.error(("" + command + " exited: ") + args);
        }
      });
    };

    return ChildProcess;

  })();

  module.exports = ChildProcess;

}).call(this);
