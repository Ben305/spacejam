// Generated by CoffeeScript 1.8.0
(function() {
  var ChildProcess, expect, isCoffee, path, _;

  expect = require("chai").expect;

  isCoffee = require('./isCoffee');

  if (isCoffee) {
    ChildProcess = require('../../src/ChildProcess');
  } else {
    ChildProcess = require('../../lib/ChildProcess');
  }

  path = require('path');

  _ = require('underscore');

  describe.only("scripts", function() {
    var child, execOptions, execRun, execTestPackages, meteorStubDir, spacejamBinDir;
    spacejamBinDir = path.resolve(__dirname, "../../bin");
    meteorStubDir = path.resolve(__dirname, "../bin");
    child = null;
    execOptions = null;
    execRun = function(done, args, expectedArgs) {
      return child.exec("" + spacejamBinDir + "/meteor-run.sh " + args, execOptions, (function(_this) {
        return function(err, stdout, stderr) {
          var actualArgs, output;
          try {
            expect(err).to.be["null"];
            output = JSON.parse(stdout);
            actualArgs = output.argv.slice(2).join(' ');
            expect(actualArgs).to.deep.equal(expectedArgs);
            return done();
          } catch (_error) {
            err = _error;
            return done(err);
          }
        };
      })(this));
    };
    execTestPackages = function(done, args, expectedArgs, expectedPort, expectedRootUrl, expectedMongoUrl) {
      var cmdLine;
      if (expectedPort == null) {
        expectedPort = 3100;
      }
      if (expectedRootUrl == null) {
        expectedRootUrl = 'http://localhost:3100/';
      }
      cmdLine = "" + spacejamBinDir + "/meteor-test-packages.sh " + args;
      return child.exec(cmdLine, execOptions, (function(_this) {
        return function(err, stdout, stderr) {
          var actualArgs, output;
          try {
            expect(err).to.be["null"];
            output = JSON.parse(stdout);
            actualArgs = output.argv.slice(2).join(' ');
            expectedArgs = "test-packages --port " + expectedPort + " " + expectedArgs;
            expect(actualArgs).to.deep.equal(expectedArgs);
            expect(output.env.PORT).to.equal(expectedPort.toString());
            expect(output.env.ROOT_URL).to.equal(expectedRootUrl);
            if (_.isString(expectedMongoUrl)) {
              expect(output.env.MONGO_URL).to.equal(expectedMongoUrl);
            } else {
              expect(output.env.MONGO_URL).to.be.undefined;
            }
            return done();
          } catch (_error) {
            err = _error;
            return done(err);
          }
        };
      })(this));
    };
    beforeEach(function() {
      var childEnv;
      childEnv = _.clone(process.env);
      childEnv.PATH = "" + meteorStubDir + ":" + childEnv.PATH;
      delete childEnv.PORT;
      delete childEnv.ROOT_URL;
      delete childEnv.MONGO_URL;
      delete childEnv.METEOR_SETTINGS_PATH;
      delete childEnv.TEST_PORT;
      delete childEnv.TEST_ROOT_URL;
      delete childEnv.TEST_MONGO_URL;
      delete childEnv.TEST_METEOR_SETTINGS_PATH;
      execOptions = {
        env: childEnv
      };
      return child = new ChildProcess();
    });
    afterEach(function() {
      try {
        return child != null ? child.kill('SIGTERM') : void 0;
      } finally {
        child = null;
      }
    });
    describe("mrun", function() {
      it("should launch meteor with the provided command line arguments", function(done) {
        return execRun(done, '--port 4000', '--port 4000');
      });
      return it("should launch meteor with --settings $METEOR_SETTINGS_PATH", function(done) {
        var expectedArgs, settingsPath;
        settingsPath = __dirname + '/settings.json';
        execOptions.env.METEOR_SETTINGS_PATH = settingsPath;
        expectedArgs = "--settings " + settingsPath + " --port 4000";
        return execRun(done, '--port 4000', expectedArgs);
      });
    });
    return describe("mtp", function() {
      it("should launch meteor with --port 3100 by default", function(done) {
        return execTestPackages(done, '--production', '--production');
      });
      it("should launch meteor with --port $TEST_PORT, set PORT to TEST_PORT and ROOT_URL to 'http://localhost:3200/'", function(done) {
        execOptions.env.TEST_PORT = 3200;
        return execTestPackages(done, '--production', '--production', 3200, 'http://localhost:3200/');
      });
      it("should launch meteor with ROOT_URL set to TEST_ROOT_URL", function(done) {
        execOptions.env.TEST_PORT = 3300;
        execOptions.env.TEST_ROOT_URL = 'https://myvm/';
        return execTestPackages(done, '--production', '--production', 3300, 'https://myvm/');
      });
      it("should launch meteor with MONGO_URL set to TEST_MONGO_URL", function(done) {
        execOptions.env.TEST_MONGO_URL = 'mongodb://user:pass@mongohq.com/testdb';
        return execTestPackages(done, '--production', '--production', 3100, 'http://localhost:3100/', 'mongodb://user:pass@mongohq.com/testdb');
      });
      it("should launch meteor with --settings $METEOR_SETTINGS_PATH", function(done) {
        var settingsPath;
        settingsPath = __dirname + '/settings.json';
        execOptions.env.METEOR_SETTINGS_PATH = settingsPath;
        return execTestPackages(done, '--release 1.0', "--settings " + settingsPath + " --release 1.0");
      });
      return it("should launch meteor with --settings $TEST_METEOR_SETTINGS_PATH", function(done) {
        var settingsPath;
        settingsPath = __dirname + '/test-settings.json';
        execOptions.env.TEST_METEOR_SETTINGS_PATH = settingsPath;
        return execTestPackages(done, '--release 1.0', "--settings " + settingsPath + " --release 1.0");
      });
    });
  });

}).call(this);
