// Generated by CoffeeScript 1.8.0
(function() {
  var ChildProcess, SpaceJam, expect, path, spacejamBin;

  expect = require("chai").expect;

  ChildProcess = require('../../src/ChildProcess');

  SpaceJam = require('../../src/SpaceJam');

  path = require('path');

  spacejamBin = require.resolve("../../bin/spacejam.coffee");

  log.info(spacejamBin);

  describe("spacejam test-packages", function() {
    var spacejamChild, standAlonePackage, testApp1, testApp2;
    this.timeout(60000);
    spacejamChild = null;
    testApp1 = "leaderboard";
    testApp2 = "todos";
    standAlonePackage = "../packages/standalone-package";
    before(function() {
      return log.setLevel("info");
    });
    beforeEach(function() {
      process.chdir(__dirname + "/../apps/leaderboard");
      delete process.env.PORT;
      delete process.env.ROOT_URL;
      delete process.env.MONGO_URL;
      delete process.env.PACKAGE_DIRS;
      return spacejamChild = new ChildProcess();
    });
    afterEach(function() {
      try {
        return spacejamChild != null ? spacejamChild.kill() : void 0;
      } finally {
        spacejamChild = null;
      }
    });
    it("should exit with 0 if tests pass for a meteor app package", function(done) {
      var args;
      spacejamChild = new ChildProcess();
      args = ["test-packages", "success"];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with errors").to.equal(SpaceJam.DONE.TEST_SUCCESS);
          return done();
        };
      })(this));
    });
    it("should exit with 0 if tests pass for a standalone package", function(done) {
      var args;
      process.chdir(__dirname + "/../packages/standalone-package");
      process.env.PACKAGE_DIRS = __dirname;
      spacejamChild = new ChildProcess();
      args = ["test-packages", "./"];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with errors").to.equal(SpaceJam.DONE.TEST_SUCCESS);
          return done();
        };
      })(this));
    });
    it("should exit with 1, if not in a meteor app or package folder", function(done) {
      var args;
      process.chdir(__dirname);
      spacejamChild = new ChildProcess();
      args = ["test-packages", "success"];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with the wrong code").to.equal(1);
          return done();
        };
      })(this));
    });
    it("should exit with 3, if package could not be found", function(done) {
      var args;
      spacejamChild = new ChildProcess();
      args = ["test-packages", standAlonePackage];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with errors").to.equal(SpaceJam.DONE.METEOR_ERROR);
          return done();
        };
      })(this));
    });
    it("should exit with 2, if tests failed", function(done) {
      var args, testPort;
      spacejamChild = new ChildProcess();
      testPort = "6096";
      args = ["test-packages", "--port", testPort, "failure"];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with the wrong code").to.equal(SpaceJam.DONE.TEST_FAILED);
          return done();
        };
      })(this));
    });
    it("should exit with 4, if --timeout has passed", function(done) {
      var args, testPort;
      spacejamChild = new ChildProcess();
      testPort = "7096";
      args = ["test-packages", "--timeout", "30000", "--port", testPort, 'timeout'];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with the wrong code").to.equal(SpaceJam.DONE.TEST_TIMEOUT);
          return done();
        };
      })(this));
    });
    it("should exit with 2, if the meteor app crashes", function(done) {
      var args, testPort;
      process.chdir(__dirname + "/../apps/todos");
      spacejamChild = new ChildProcess();
      testPort = "8096";
      args = ["test-packages", "--port", testPort, 'appfails'];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code).to.equal(SpaceJam.DONE.METEOR_ERROR);
          return done();
        };
      })(this));
    });
    return it("should exit with 0, in case of a complete test, with a settings file, multiple packages, including wildcards in package names", function(done) {
      var args, testPort;
      spacejamChild = new ChildProcess();
      testPort = "10096";
      args = ["test-packages", "--settings", "settings.json", "--port", testPort, 'packages/settings', 'success*'];
      spacejamChild.spawn(spacejamBin, args);
      return spacejamChild.child.on("exit", (function(_this) {
        return function(code) {
          expect(code, "spacejam exited with errors").to.equal(SpaceJam.DONE.TEST_SUCCESS);
          return done();
        };
      })(this));
    });
  });

}).call(this);
