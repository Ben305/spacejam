// Generated by CoffeeScript 1.8.0
(function() {
  var CLI, ChildProcess, Spacejam, expect, isCoffee, path, spacejamBin;

  expect = require("chai").expect;

  isCoffee = require('./isCoffee');

  if (isCoffee) {
    CLI = require('../../src/CLI');
    ChildProcess = require('../../src/ChildProcess');
    Spacejam = require('../../src/Spacejam');
  } else {
    CLI = require('../../lib/CLI');
    ChildProcess = require('../../lib/ChildProcess');
    Spacejam = require('../../lib/Spacejam');
  }

  path = require('path');

  if (isCoffee) {
    spacejamBin = require.resolve("../../bin/spacejam.coffee");
  } else {
    spacejamBin = require.resolve("../../bin/spacejam");
  }

  log.info(spacejamBin);

  describe("spacejam", function() {
    var spacejamChild, spacejamChild2, standAlonePackage, testApp1, testApp2;
    this.timeout(60000);
    spacejamChild = null;
    spacejamChild2 = null;
    testApp1 = "leaderboard";
    testApp2 = "todos";
    standAlonePackage = "../packages/standalone-package";
    before(function() {
      return log.debug("spacejam.before");
    });
    beforeEach(function() {
      log.debug("spacejam.beforeEach");
      process.chdir(__dirname + "/../apps/leaderboard");
      delete process.env.PORT;
      delete process.env.ROOT_URL;
      delete process.env.MONGO_URL;
      delete process.env.PACKAGE_DIRS;
      return spacejamChild = new ChildProcess();
    });
    afterEach(function() {
      log.debug("spacejam.afterEach");
      try {
        if (spacejamChild != null) {
          spacejamChild.kill('SIGPIPE');
        }
      } finally {
        spacejamChild = null;
      }
      try {
        return spacejamChild2 != null ? spacejamChild2.kill('SIGPIPE') : void 0;
      } finally {
        spacejamChild2 = null;
      }
    });
    describe("test-packages", function() {
      it("should exit with 0 if tests pass for a meteor app package", function(done) {
        var args;
        spacejamChild = new ChildProcess();
        args = ["test-packages", "success"];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with errors").to.equal(Spacejam.DONE.TEST_SUCCESS);
            return done();
          };
        })(this));
      });
      it("should exit with 0 if tests pass for a standalone package", function(done) {
        var args;
        process.chdir(__dirname + "/../packages/standalone-package");
        process.env.PACKAGE_DIRS = path.normalize(__dirname + '/../packages');
        spacejamChild = new ChildProcess();
        args = ["test-packages", "./"];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with errors").to.equal(Spacejam.DONE.TEST_SUCCESS);
            return done();
          };
        })(this));
      });
      it("should execute multiple independent package tests provided by path while not in a meteor app or package folder", function(done) {
        var args;
        process.chdir(path.resolve(__dirname, ".."));
        spacejamChild = new ChildProcess();
        args = ["test-packages", "packages/standalone-package-dep", 'apps/leaderboard/packages/success'];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            var err;
            try {
              expect(code, "spacejam exited with errors").to.equal(Spacejam.DONE.TEST_SUCCESS);
              return done();
            } catch (_error) {
              err = _error;
              return done(err);
            }
          };
        })(this));
      });
      it("should exit with 3, if meteor couldn't find package", function(done) {
        var args;
        process.chdir(__dirname);
        spacejamChild = new ChildProcess();
        args = ["test-packages", "success"];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with the wrong code").to.equal(Spacejam.DONE.METEOR_ERROR);
            return done();
          };
        })(this));
      });
      it("should exit with 3, if package could not be found", function(done) {
        var args;
        spacejamChild = new ChildProcess();
        args = ["test-packages", standAlonePackage];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with errors").to.equal(Spacejam.DONE.METEOR_ERROR);
            return done();
          };
        })(this));
      });
      it("should exit with 2, if tests failed", function(done) {
        var args, testPort;
        spacejamChild = new ChildProcess();
        testPort = "6096";
        args = ["test-packages", "--port", testPort, "failure"];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with the wrong code").to.equal(Spacejam.DONE.TEST_FAILED);
            return done();
          };
        })(this));
      });
      it("should exit with 4, if --timeout has passed", function(done) {
        var args, testPort;
        spacejamChild = new ChildProcess();
        testPort = "7096";
        args = ["test-packages", "--timeout", "30000", "--port", testPort, 'timeout'];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with the wrong code").to.equal(Spacejam.DONE.TEST_TIMEOUT);
            return done();
          };
        })(this));
      });
      it("should exit with 2, if the meteor app crashes", function(done) {
        var args, testPort;
        this.timeout(90000);
        process.chdir(__dirname + "/../apps/todos");
        spacejamChild = new ChildProcess();
        testPort = "8096";
        args = ["test-packages", "--port", testPort, 'appfails'];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code).to.equal(Spacejam.DONE.METEOR_ERROR);
            return done();
          };
        })(this));
      });
      return it("should exit with 0, in case of a complete test, with a settings file, multiple packages, including wildcards in package names", function(done) {
        var args, testPort;
        spacejamChild = new ChildProcess();
        testPort = "10096";
        args = ["test-packages", "--settings", "settings.json", "--port", testPort, 'packages/settings', 'success*'];
        spacejamChild.spawn(spacejamBin, args);
        return spacejamChild.child.on("exit", (function(_this) {
          return function(code) {
            expect(code, "spacejam exited with errors").to.equal(Spacejam.DONE.TEST_SUCCESS);
            return done();
          };
        })(this));
      });
    });
    describe("test-in-velocity", function() {
      return it("should never exit", function(done) {
        var args, onExit, testPort, timeoutId;
        process.env.PACKAGE_DIRS = path.normalize(__dirname + '/../../packages');
        log.debug("PACKAGE_DIRS=" + process.env.PACKAGE_DIRS);
        spacejamChild = new ChildProcess();
        testPort = "11096";
        args = ["test-in-velocity", "--port", testPort, 'success'];
        spacejamChild.spawn(spacejamBin, args);
        onExit = (function(_this) {
          return function(code) {
            clearTimeout(timeoutId);
            return done("spacejam test-in-velocity should never exit");
          };
        })(this);
        spacejamChild.child.on("exit", onExit);
        return timeoutId = setTimeout((function(_this) {
          return function() {
            var err;
            try {
              spacejamChild.child.removeListener('exit', onExit);
              spacejamChild.kill('SIGPIPE');
              return done();
            } catch (_error) {
              err = _error;
              return done(err);
            }
          };
        })(this), 45000);
      });
    });
    return describe("package-version", function() {
      return it("should print the package version", function(done) {
        process.chdir(__dirname + "/../packages/standalone-package");
        spacejamChild = new ChildProcess();
        return spacejamChild.exec("" + spacejamBin + " package-version", null, (function(_this) {
          return function(err, stdout, stderr) {
            try {
              expect(err).to.be["null"];
              expect(stdout.toString()).to.contain('0.9.5');
              return done();
            } catch (_error) {
              err = _error;
              return done(err);
            }
          };
        })(this));
      });
    });
  });

}).call(this);
